 According to the distribution of noisy pixel values, impulse noise can be classified into two categories: fixedvalued impulse noise and random-valued impulse noise.
 The former is also known as salt-and-pepper noise because the pixel value of a noisy pixel is either minimum or maximum value in gray-scale images. 
 The values of noisy pixels corrupted by random-valued impulse noise are uniformly distributed in the range of [0, 255] for gray-scale images. 
 There have been many methods for removing saltand-pepper noise, and some of them perform very well. The random-valued impulse noise is more difficult to handle due to the random distribution of noisy pixel values.

 the denoising methods can be classified into two categories: lower complexity techniques and higher complexity techniques. 
 
 A novel adaptive decision-tree-based denoising method (DTBDM) and its VLSI architecture for removing random-valued impulse noise. The results of reconstructed pixels are adaptively written back as a part of input data. The proposed design requires simple computations and two line memory buffers only, so its hardware cost is low. In our design, 99.6 percent of storage is reduced. Furthermore, only simple arithmetic operations, such as addition and subtraction, are used in DTBDM. Our extensive experimental results demonstrate that the proposed technique can obtain better performances in terms of both quantitative evaluation and visual quality than other lower complexity denoising methods. Moreover, the performance can be comparable to the higher complexity methods.

PROPOSED METHODOLOGY-
The noise considered in this paper is random-valued impulse noise with uniform distribution. Here, we adopt a 3x3 mask for image denoising. Assume the pixel to be denoised is located at coordinate (i,j) and denoted as p(i,j), and its luminance value is named as f(i,j). According to the input sequence of image denoising process, we can divide other eight pixel values into two sets: W(TopHalf) and W(BottomHalf). They are given as 
W(TopHalf)= {a,b,c,d} 
W(BottomHalf)= {e,f,g,h}
DTBDM consists of two components: decision-tree-based impulse detector and edge-preserving image filter. The detector determines whether p(i,j) is a noisy pixel by using the decision tree and the correlation between pixel p(i,j) and its neighboring pixels. If the result is positive, edgepreserving image filter based on direction-oriented filter generates the reconstructed value. Otherwise, the value will be kept unchanged.

Decision-Tree-Based Impulse Detector
In order to determine whether p(i,j) is a noisy pixel, the correlations between pi;j and its neighboring pixels are considered. Surveying these methods, we can simply classify them into several ways—observing the degree of isolation at current pixel,determining whether the current pixel is on a fringe or comparing the similarity between current pixel and its neighboring pixels. Therefore, in our decision-tree-based impulse detector, we design three modules—isolation module (IM), fringe module (FM), and similarity module (SM). Three concatenating decisions of these modules build a decision tree. The decision tree is a binary tree and can determine the status of pi;j by using the different equations in different modules. First, we use isolation module to decide whether the pixel value is in a smooth region. If the result is negative, we conclude that the current pixel belongs to noisy free. Otherwise, if the result is positive, it means that the current pixel might be a noisy pixel or just situated on an edge. The fringe module is used to confirm the result. If the current pixel is situated on an edge, the result of fringe module will be negative (noisy free); otherwise, the result will be positive. If isolation module and fringe module cannot determine whether current pixel belongs to noisy free, the similarity module is used to decide the result. It compares the similarity between current pixel and its neighboring pixels. If the result is positive, p(i,j) is a noisy pixel; otherwise, it is noise free. The following sections describe the three modules in detail.

2.1.1 Isolation Module 
The pixel values in a smooth region should be close or locally slightly varying. The differences between its neighboring pixel values are small. If there are noisy values, edges, or blocks in this region, the distribution of the values is different. Therefore, we determine whether current pixel is an isolation point by observing the smoothness of its surrounding pixels. According to the above concepts, we first detect the maximum and minimum luminance values in W(TopHalf), named as TopHalf_ max, TopHalf_min, and calculate the difference between them, named as TopHalf_diff. For WBottomHalf, we apply the same idea to obtain BottomHalf_diff. The two difference values are compared with a threshold Th IMa to decide whether the
surrounding region belongs to a smooth area.

Next, we take pi;j into consideration. Two values must be calculated first. One is the difference between fi;j and TopHalf_max; the other is the difference between fi;j and TopHalf_min. After the subtraction, a threshold ThIMb is used to compare these two differences. The same method as in the case of WBottomHalf is applied. 

Finally, we can make a temporary decision whether pi;j belongs to a suspected noisy pixel or is noisy free.

2.1.2 Fringe Module 

If pi;j has a great difference with neighboring pixels, it might be a noisy pixel (discussed in Section 2.1.1 IM) or just situated on an edge, as shown in Fig. 6. How to conclude that a pixel is noisy or situated on an edge is difficult. In order to deal with this case, we define four directions, from E1 to E4, as shown in Fig. 7. We take direction E1 for example. By calculating the absolute difference between fi;j and the other two pixel values along the same direction, respectively, we can determine whether there is an edge or not. 

2.1.3 Similarity Module 

The last module is similarity module. The luminance values in mask W located in a noisy-free area might be close. The median is always located in the center of the variational series, while the impulse is usually located near one of its ends. Hence, if there are extreme big or small values, that implies the possibility of noisy signals. According to this concept, we sort nine values in ascending order and obtain the fourth, fifth, and sixth values which are close to the median in mask W. The fourth, fifth, and sixth values are represented as 4thinWi;j, MedianInWi;j, and 6thinWi;j. 

Maxi;j and Mini;j are used to determine the status of pixel pi;j. However, in order to make the decision more precisely, we do some modifications as

Finally, if fi;j is not between Nmax and Nmin, we conclude that pi;j is a noise pixel. Edge-preserving image filter will be used to build the reconstructed value. Otherwise, the original value fi;j will be the output. The equation is as

Obviously, the threshold affects the quality of denoised images of the proposed method. A more appropriate threshold contributes to achieve a better detection result. However, it is not easy to derive an optimal threshold through analytic formulation. The fixed values of thresholds make our algorithm simple and suitable for hardware implementation. According to our extensive experimental results, the thresholds Th IMa, TH IMb, Th FMa, Th FMb, Th SMa, and Th SMb are all predefined values and set as 20, 25, 40, 80, 15, and 60, respectively.